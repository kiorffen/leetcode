/***************************************************************************
*
* Copyright (c) Tang Haiyu. All Rights Reserved
*
***************************************************************************/

/**
* @file   main.cc
* @author tanghaiyu777@163.com
* @date   2020/02/18
* @brief  
*
**/

#include <iostream>
#include <vector>

using namespace std;

class Solution {
public:
    int min(int a, int b, int c) {
        if (a<b && a <c) {
            return a;
        }
        if (b<a && b <c) {
            return b;
        }

        return c;
    }
    int maximalSquare(vector<vector<char>>& matrix) {
        int m = matrix.size();
        if (m==0) {
            return 0;
        }
        int n = matrix[0].size();
        vector<vector<int>> dp(m, vector<int>(n,0));

        int max = 0;
        for (int i=0;i<m;i++) {
            for (int j=0;j<n;j++) {
                dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i][j-1]) + 1;
                if (max<dp[i][j]) {
                    max = dp[i][j];
                }
            }
        }

        return max*max;
    }
};

int main() {
    vector<vector<int>> matrix = {};

    return 0;
}
